- name: Configure Velociraptor Server
  hosts: vr_servers
  tasks:

   - name: Accept all incoming requests temporarily
     ansible.builtin.iptables:
       chain: INPUT
       policy: ACCEPT
     become: true

   - name: Accept all outgoing requests temporarily
     ansible.builtin.iptables:
       chain: OUTPUT
       policy: ACCEPT
     become: true

   - name: Create velociraptor opt directory if it does not exist
     ansible.builtin.file:
       path: /opt/velociraptor
       state: directory
       mode: '0700'

   - name: Create velociraptor etc directory if it does not exist
     ansible.builtin.file:
       path: /etc/velociraptor
       state: directory
       mode: '0700'

   - name: Download VR binary
     ansible.builtin.uri:
       url: https://github.com/Velocidex/velociraptor/releases/download/v0.6.9/velociraptor-v0.6.9-linux-amd64-musl
       dest: /opt/velociraptor/velociraptor
       mode: '0700'
       status_code: [200,304]

   - name: Download VR MSI
     ansible.builtin.uri:
       url: https://github.com/Velocidex/velociraptor/releases/download/v0.6.9/velociraptor-v0.6.9-windows-amd64.msi
       dest: /opt/velociraptor/velociraptor.msi
       mode: '0700'
       status_code: [ 200,304 ]
     become: true

   - name: Create merge file
     ansible.builtin.copy:
       dest: /etc/velociraptor/merge.json
       content: |
        {
          "Client": {
            "server_urls":["https://{{ansible_eth0.ipv4.address}}/"],
            "use_self_signed_ssl": true
          },
          "API": {
            "bind_address": "0.0.0.0",
            "hostname": "{{ansible_eth0.ipv4.address}}",
            "bind_port": 8001
          },
          "GUI": {
            "bind_address": "0.0.0.0",
            "bind_port": 8889
          },
          "Frontend": {
            "hostname": "{{ansible_eth0.ipv4.address}}",
            "bind_address": "0.0.0.0",
            "bind_port": 443
          }
        }

   - name: Generate velociraptor server config
     ansible.builtin.shell: /opt/velociraptor/velociraptor config generate --merge "$(cat /etc/velociraptor/merge.json)" > /etc/velociraptor/server.config.yaml

   - name: Generate velociraptor client config
     ansible.builtin.shell: /opt/velociraptor/velociraptor --config /etc/velociraptor/server.config.yaml config client > /etc/velociraptor/client.config.yaml

   - name: Generate velociraptor debian file
     ansible.builtin.shell: /opt/velociraptor/velociraptor --config /etc/velociraptor/server.config.yaml debian server

   - name: Generate velociraptor msi
     ansible.builtin.shell: /opt/velociraptor/velociraptor config repack --msi /opt/velociraptor/velociraptor.msi /etc/velociraptor/client.config.yaml /opt/velociraptor/vr.msi
     become: true

   - name: Set permissions for VR MSI
     ansible.builtin.file:
       path: /opt/velociraptor/vr.msi
       state: file
       mode: '0777'
     become: true

   - name: Install debian package
     ansible.builtin.shell: apt -o DPkg::Lock::Timeout=600 install ./velociraptor_*.deb

   - name: Flush IP Tables
     ansible.builtin.iptables:
       chain: INPUT
       flush: yes
     become: true

   - name: Allow SSH from known ips
     ansible.builtin.iptables:
       chain: INPUT
       protocol: tcp
       destination_port: 22
       source: "{{ item }}"
       jump: ACCEPT
       comment: Allow VPN users to access the server via SSH
     become: true
     loop: "{{ vpn_egress_ips }}"

   - name: Allow GUI from VPN
     ansible.builtin.iptables:
       chain: INPUT
       protocol: tcp
       destination_port: 8889
       source: "{{ item }}"
       jump: ACCEPT
       comment: Allow VPN users to access the Velociraptor GUI
     become: true
     loop: "{{ vpn_egress_ips }}"

   - name: Allow VR Client Comms
     ansible.builtin.iptables:
       chain: INPUT
       protocol: tcp
       destination_port: 443
       jump: ACCEPT
       comment: Allow external requests to velociraptor server
     become: true

   - name: Allow API from VPN
     ansible.builtin.iptables:
       chain: INPUT
       protocol: tcp
       destination_port: 8001
       source: "{{ item }}"
       jump: ACCEPT
       comment: Allow VPN users to access the Velociraptor API
     loop: "{{ vpn_egress_ips }}"
     become: true

   - name: Allow API from self
     ansible.builtin.iptables:
       chain: INPUT
       protocol: tcp
       destination_port: 8001
       source: "{{ansible_eth0.ipv4.address}}"
       jump: ACCEPT
       comment: Allow VPN users to access the Velociraptor API
     become: true

   - name: Allow loopback interface
     ansible.builtin.iptables:
       chain: INPUT
       in_interface: lo
       jump: ACCEPT
     become: true

   - name: Allow from internal network
     ansible.builtin.iptables:
       chain: INPUT
       protocol: tcp
       source: "{{ ansible_eth1.ipv4.address }}/{{ (ansible_eth1.ipv4.network + '/' + ansible_eth1.ipv4.netmask) | ipaddr('prefix') | string }}"
       jump: ACCEPT
       comment: Allow internal access to VR
     become: true

   - name: Deny all other inputs
     ansible.builtin.iptables:
       chain: INPUT
       policy: DROP
     become: true

   - name: Allow OUTPUT to VPN
     ansible.builtin.iptables:
       chain: OUTPUT
       protocol: tcp
       destination: "{{ item }}"
       jump: ACCEPT
       comment: Allow outflow to VPN
     become: true
     loop: "{{ vpn_egress_ips }}"

   - name: Allow OUTPUT to self
     ansible.builtin.iptables:
       chain: OUTPUT
       protocol: tcp
       destination: "{{ansible_eth0.ipv4.address}}"
       jump: ACCEPT
       comment: Allow outflow to self
     become: true

   - name: Deny all other outflow
     ansible.builtin.iptables:
       chain: OUTPUT
       policy: DROP
     become: true

